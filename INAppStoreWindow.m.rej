diff a/INAppStoreWindow.m b/INAppStoreWindow.m	(rejected hunks)
@@ -59,104 +59,101 @@ const CGFloat INWindowDocumentVersionsDividerOriginY = 2.f;
 /** Corner clipping radius **/
 const CGFloat INCornerClipRadius = 4.0;
 
-NS_INLINE CGFloat INMidHeight(NSRect aRect){
-    return (aRect.size.height * (CGFloat)0.5);
+NS_INLINE CGFloat INMidHeight(NSRect aRect) {
+	return (aRect.size.height * (CGFloat) 0.5);
 }
 
 CF_RETURNS_RETAINED
-NS_INLINE CGPathRef INCreateClippingPathWithRectAndRadius(NSRect rect, CGFloat radius)
-{
-    CGMutablePathRef path = CGPathCreateMutable();
-    CGPathMoveToPoint(path, NULL, NSMinX(rect), NSMinY(rect));
-    CGPathAddLineToPoint(path, NULL, NSMinX(rect), NSMaxY(rect)-radius);
-    CGPathAddArcToPoint(path, NULL, NSMinX(rect), NSMaxY(rect), NSMinX(rect)+radius, NSMaxY(rect), radius);
-    CGPathAddLineToPoint(path, NULL, NSMaxX(rect)-radius, NSMaxY(rect));
-    CGPathAddArcToPoint(path, NULL,  NSMaxX(rect), NSMaxY(rect), NSMaxX(rect), NSMaxY(rect)-radius, radius);
-    CGPathAddLineToPoint(path, NULL, NSMaxX(rect), NSMinY(rect));
-    CGPathCloseSubpath(path);
-    return path;
+NS_INLINE CGPathRef INCreateClippingPathWithRectAndRadius(NSRect rect, CGFloat radius) {
+	CGMutablePathRef path = CGPathCreateMutable();
+	CGPathMoveToPoint(path, NULL, NSMinX(rect), NSMinY(rect));
+	CGPathAddLineToPoint(path, NULL, NSMinX(rect), NSMaxY(rect) - radius);
+	CGPathAddArcToPoint(path, NULL, NSMinX(rect), NSMaxY(rect), NSMinX(rect) + radius, NSMaxY(rect), radius);
+	CGPathAddLineToPoint(path, NULL, NSMaxX(rect) - radius, NSMaxY(rect));
+	CGPathAddArcToPoint(path, NULL, NSMaxX(rect), NSMaxY(rect), NSMaxX(rect), NSMaxY(rect) - radius, radius);
+	CGPathAddLineToPoint(path, NULL, NSMaxX(rect), NSMinY(rect));
+	CGPathCloseSubpath(path);
+	return path;
 }
 
 CF_RETURNS_RETAINED
-NS_INLINE CGColorRef INCreateCGColorFromNSColor(NSColor *color)
-{
-    NSColor *rgbColor = [color colorUsingColorSpaceName:NSCalibratedRGBColorSpace];
-    CGFloat components[4];
-    [rgbColor getComponents:components];
-    
-    CGColorSpaceRef theColorSpace = CGColorSpaceCreateWithName(kCGColorSpaceGenericRGB);
-    CGColorRef theColor = CGColorCreate(theColorSpace, components);
-    CGColorSpaceRelease(theColorSpace);
+NS_INLINE CGColorRef INCreateCGColorFromNSColor(NSColor *color) {
+	NSColor *rgbColor = [color colorUsingColorSpaceName:NSCalibratedRGBColorSpace];
+	CGFloat components[4];
+	[rgbColor getComponents:components];
+
+	CGColorSpaceRef theColorSpace = CGColorSpaceCreateWithName(kCGColorSpaceGenericRGB);
+	CGColorRef theColor = CGColorCreate(theColorSpace, components);
+	CGColorSpaceRelease(theColorSpace);
 	return theColor;
 }
 
 CF_RETURNS_RETAINED
-NS_INLINE CGGradientRef INCreateGradientWithColors(NSColor *startingColor, NSColor *endingColor)
-{
-    CGFloat locations[2] = {0.0f, 1.0f, };
+NS_INLINE CGGradientRef INCreateGradientWithColors(NSColor *startingColor, NSColor *endingColor) {
+	CGFloat locations[2] = {0.0f, 1.0f,};
 	CGColorRef cgStartingColor = INCreateCGColorFromNSColor(startingColor);
 	CGColorRef cgEndingColor = INCreateCGColorFromNSColor(endingColor);
-    #if __has_feature(objc_arc)
-    CFArrayRef colors = (__bridge CFArrayRef)[NSArray arrayWithObjects:(__bridge id)cgStartingColor, (__bridge id)cgEndingColor, nil];
-    #else
-    CFArrayRef colors = (CFArrayRef)[NSArray arrayWithObjects:(id)cgStartingColor, (id)cgEndingColor, nil];
-    #endif
-    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
-    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, colors, locations);
-    CGColorSpaceRelease(colorSpace);
+#if __has_feature(objc_arc)
+	CFArrayRef colors = (__bridge CFArrayRef) [NSArray arrayWithObjects:(__bridge id) cgStartingColor, (__bridge id) cgEndingColor, nil];
+#else
+	CFArrayRef colors = (CFArrayRef)[NSArray arrayWithObjects:(id)cgStartingColor, (id)cgEndingColor, nil];
+	#endif
+	CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
+	CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, colors, locations);
+	CGColorSpaceRelease(colorSpace);
 	CGColorRelease(cgStartingColor);
 	CGColorRelease(cgEndingColor);
-    return gradient;
+	return gradient;
 }
 
 @interface INAppStoreWindowDelegateProxy : NSProxy <NSWindowDelegate>
-@property (nonatomic, assign) id<NSWindowDelegate> secondaryDelegate;
+@property (nonatomic, assign) id <NSWindowDelegate> secondaryDelegate;
 @end
 
 @implementation INAppStoreWindowDelegateProxy
 
 - (NSMethodSignature *)methodSignatureForSelector:(SEL)selector
 {
-    NSMethodSignature *signature = [[self.secondaryDelegate class] instanceMethodSignatureForSelector:selector];
-    if (!signature) {
-        signature = [super methodSignatureForSelector:selector];
-    }
-    return signature;
+	NSMethodSignature *signature = [[self.secondaryDelegate class] instanceMethodSignatureForSelector:selector];
+	if (!signature) {
+		signature = [super methodSignatureForSelector:selector];
+	}
+	return signature;
 }
 
 - (BOOL)respondsToSelector:(SEL)aSelector
 {
-    if ([self.secondaryDelegate respondsToSelector:aSelector]) {
-        return YES;
-    } else if (aSelector == @selector(window:willPositionSheet:usingRect:)) {
-        return YES;
-    }
-    return NO;
+	if ([self.secondaryDelegate respondsToSelector:aSelector]) {
+		return YES;
+	} else if (aSelector == @selector(window:willPositionSheet:usingRect:)) {
+		return YES;
+	}
+	return NO;
 }
 
 - (void)forwardInvocation:(NSInvocation *)anInvocation
 {
-    if ([self.secondaryDelegate respondsToSelector:[anInvocation selector]]) {
-        [anInvocation invokeWithTarget:self.secondaryDelegate];
-    }
+	if ([self.secondaryDelegate respondsToSelector:[anInvocation selector]]) {
+		[anInvocation invokeWithTarget:self.secondaryDelegate];
+	}
 }
 
 - (NSRect)window:(INAppStoreWindow *)window willPositionSheet:(NSWindow *)sheet usingRect:(NSRect)rect
 {
-    // Somehow the forwarding machinery doesn't handle this.
-    if ([self.secondaryDelegate respondsToSelector:_cmd]) {
-        return [self.secondaryDelegate window:window willPositionSheet:sheet usingRect:rect];
-    }
-    rect.origin.y = NSHeight(window.frame) - window.titleBarHeight;
-    return rect;
+	// Somehow the forwarding machinery doesn't handle this.
+	if ([self.secondaryDelegate respondsToSelector:_cmd]) {
+		return [self.secondaryDelegate window:window willPositionSheet:sheet usingRect:rect];
+	}
+	rect.origin.y = NSHeight(window.frame) - window.titleBarHeight;
+	return rect;
 }
 
 - (BOOL)isKindOfClass:(Class)aClass
 {
-    if (self.secondaryDelegate) {
-        return [self.secondaryDelegate isKindOfClass:aClass];
-    }
-    return NO;
+	if (self.secondaryDelegate) {
+		return [self.secondaryDelegate isKindOfClass:aClass];
+	}
+	return NO;
 }
 
 @end
@@ -429,24 +428,24 @@ NS_INLINE CGGradientRef INCreateGradientWithColors(NSColor *startingColor, NSCol
 
 - (void)setFrame:(NSRect)frameRect
 {
-	frameRect = [(INAppStoreWindow *)self.window _contentViewFrame];
+	frameRect = [(INAppStoreWindow *) self.window _contentViewFrame];
 	[super setFrame:frameRect];
 }
 
 - (void)setFrameSize:(NSSize)newSize
 {
-	newSize = [(INAppStoreWindow *)self.window _contentViewFrame].size;
+	newSize = [(INAppStoreWindow *) self.window _contentViewFrame].size;
 	[super setFrameSize:newSize];
 }
 
 @end
 
-@implementation INAppStoreWindow{
-    CGFloat _cachedTitleBarHeight;
-    BOOL _setFullScreenButtonRightMargin;
+@implementation INAppStoreWindow {
+	CGFloat _cachedTitleBarHeight;
+	BOOL _setFullScreenButtonRightMargin;
 	BOOL _preventWindowFrameChange;
-    INAppStoreWindowDelegateProxy *_delegateProxy;
-    INTitlebarContainer *_titleBarContainer;
+	INAppStoreWindowDelegateProxy *_delegateProxy;
+	INTitlebarContainer *_titleBarContainer;
 }
 
 @synthesize titleBarView = _titleBarView;
@@ -517,54 +516,54 @@ NS_INLINE CGGradientRef INCreateGradientWithColors(NSColor *startingColor, NSCol
 
 - (void)becomeKeyWindow
 {
-    [super becomeKeyWindow];
-    [self _updateTitlebarView];
-    [self _layoutTrafficLightsAndContent];
-    [self _setupTrafficLightsTrackingArea];
+	[super becomeKeyWindow];
+	[self _updateTitlebarView];
+	[self _layoutTrafficLightsAndContent];
+	[self _setupTrafficLightsTrackingArea];
 }
 
 - (void)resignKeyWindow
 {
-    [super resignKeyWindow];
-    [self _updateTitlebarView];
-    [self _layoutTrafficLightsAndContent];
+	[super resignKeyWindow];
+	[self _updateTitlebarView];
+	[self _layoutTrafficLightsAndContent];
 }
 
 - (void)becomeMainWindow
 {
-    [super becomeMainWindow];
-    [self _updateTitlebarView];
+	[super becomeMainWindow];
+	[self _updateTitlebarView];
 }
 
 - (void)resignMainWindow
 {
-    [super resignMainWindow];
-    [self _updateTitlebarView];
+	[super resignMainWindow];
+	[self _updateTitlebarView];
 }
 
 - (void)setContentView:(NSView *)aView
 {
 	// Remove performance-optimized content view class when changing content views
-    NSView *oldView = [self contentView];
-    if (oldView && object_getClass(oldView) == [INAppStoreWindowContentView class]) {
+	NSView *oldView = [self contentView];
+	if (oldView && object_getClass(oldView) == [INAppStoreWindowContentView class]) {
 		object_setClass(oldView, [NSView class]);
-    }
-    
-    [super setContentView:aView];
-    
+	}
+
+	[super setContentView:aView];
+
 	// Swap in performance-optimized content view class
-    if (aView && object_getClass(aView) == [NSView class]) {
+	if (aView && object_getClass(aView) == [NSView class]) {
 		object_setClass(aView, [INAppStoreWindowContentView class]);
-    }
-	
-    [self _repositionContentView];
+	}
+
+	[self _repositionContentView];
 }
 
 - (void)setTitle:(NSString *)aString
 {
-    [super setTitle:aString];
-    [self _layoutTrafficLightsAndContent];
-    [self _displayWindowAndTitlebar];
+	[super setTitle:aString];
+	[self _layoutTrafficLightsAndContent];
+	[self _displayWindowAndTitlebar];
 }
 
 - (void)setMaxSize:(NSSize)size
@@ -584,219 +583,227 @@ NS_INLINE CGGradientRef INCreateGradientWithColors(NSColor *startingColor, NSCol
 
 - (void)setTitleBarView:(NSView *)newTitleBarView
 {
-    if ((_titleBarView != newTitleBarView) && newTitleBarView) {
-        [_titleBarView removeFromSuperview];
-        #if __has_feature(objc_arc)
-        _titleBarView = newTitleBarView;
-        #else
-        [_titleBarView release];
-        _titleBarView = [newTitleBarView retain];
-        #endif
-        [_titleBarView setFrame:[_titleBarContainer bounds]];
-        [_titleBarView setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
-        [_titleBarContainer addSubview:_titleBarView];
-    }
+	if ((_titleBarView != newTitleBarView) && newTitleBarView) {
+		[_titleBarView removeFromSuperview];
+#if __has_feature(objc_arc)
+		_titleBarView = newTitleBarView;
+#else
+		[_titleBarView release];
+		_titleBarView = [newTitleBarView retain];
+		#endif
+		[_titleBarView setFrame:[_titleBarContainer bounds]];
+		[_titleBarView setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
+		[_titleBarContainer addSubview:_titleBarView];
+	}
 }
 
 - (NSView *)titleBarView
 {
-    return _titleBarView;
+	return _titleBarView;
 }
 
 - (void)setTitleBarHeight:(CGFloat)newTitleBarHeight
 {
-    if (_titleBarHeight != newTitleBarHeight) {
-        _cachedTitleBarHeight = newTitleBarHeight;
-        _titleBarHeight = _cachedTitleBarHeight;
-        [self _layoutTrafficLightsAndContent];
-        [self _displayWindowAndTitlebar];
-    }
+	if (_titleBarHeight != newTitleBarHeight) {
+		_cachedTitleBarHeight = newTitleBarHeight;
+		_titleBarHeight = _cachedTitleBarHeight;
+		[self _layoutTrafficLightsAndContent];
+		[self _displayWindowAndTitlebar];
+	}
 }
 
 - (CGFloat)titleBarHeight
 {
-    return _titleBarHeight;
+	return _titleBarHeight;
 }
 
 - (void)setShowsBaselineSeparator:(BOOL)showsBaselineSeparator
 {
-    if (_showsBaselineSeparator != showsBaselineSeparator) {
-        _showsBaselineSeparator = showsBaselineSeparator;
-        [self.titleBarView setNeedsDisplay:YES];
-    }
+	if (_showsBaselineSeparator != showsBaselineSeparator) {
+		_showsBaselineSeparator = showsBaselineSeparator;
+		[self.titleBarView setNeedsDisplay:YES];
+	}
 }
 
 - (BOOL)showsBaselineSeparator
 {
-    return _showsBaselineSeparator;
+	return _showsBaselineSeparator;
 }
 
 - (void)setTrafficLightButtonsLeftMargin:(CGFloat)newTrafficLightButtonsLeftMargin
 {
-    if (_trafficLightButtonsLeftMargin != newTrafficLightButtonsLeftMargin) {
-        _trafficLightButtonsLeftMargin = newTrafficLightButtonsLeftMargin;
-        [self _layoutTrafficLightsAndContent];
-        [self _displayWindowAndTitlebar];
-        [self _setupTrafficLightsTrackingArea];
-    }
+	if (_trafficLightButtonsLeftMargin != newTrafficLightButtonsLeftMargin) {
+		_trafficLightButtonsLeftMargin = newTrafficLightButtonsLeftMargin;
+		[self _layoutTrafficLightsAndContent];
+		[self _displayWindowAndTitlebar];
+		[self _setupTrafficLightsTrackingArea];
+	}
 }
 
 - (CGFloat)trafficLightButtonsLeftMargin
 {
-    return _trafficLightButtonsLeftMargin;
+	return _trafficLightButtonsLeftMargin;
 }
 
 
 - (void)setFullScreenButtonRightMargin:(CGFloat)newFullScreenButtonRightMargin
 {
-    if (_fullScreenButtonRightMargin != newFullScreenButtonRightMargin) {
-        _setFullScreenButtonRightMargin = YES;
-        _fullScreenButtonRightMargin = newFullScreenButtonRightMargin;
-        [self _layoutTrafficLightsAndContent];
-        [self _displayWindowAndTitlebar];
-    }
+	if (_fullScreenButtonRightMargin != newFullScreenButtonRightMargin) {
+		_setFullScreenButtonRightMargin = YES;
+		_fullScreenButtonRightMargin = newFullScreenButtonRightMargin;
+		[self _layoutTrafficLightsAndContent];
+		[self _displayWindowAndTitlebar];
+	}
 }
 
 - (CGFloat)fullScreenButtonRightMargin
 {
-    return _fullScreenButtonRightMargin;
+	return _fullScreenButtonRightMargin;
 }
 
-- (void)setShowsTitle:(BOOL)showsTitle {
-    if (_showsTitle != showsTitle) {
-        _showsTitle = showsTitle;
-        [self _displayWindowAndTitlebar];
-    }
+- (void)setShowsTitle:(BOOL)showsTitle
+{
+	if (_showsTitle != showsTitle) {
+		_showsTitle = showsTitle;
+		[self _displayWindowAndTitlebar];
+	}
 }
 
-- (void)setShowsDocumentProxyIcon:(BOOL)showsDocumentProxyIcon {
-    if (_showsDocumentProxyIcon != showsDocumentProxyIcon) {
-        _showsDocumentProxyIcon = showsDocumentProxyIcon;
-        [self _displayWindowAndTitlebar];
-    }
+- (void)setShowsDocumentProxyIcon:(BOOL)showsDocumentProxyIcon
+{
+	if (_showsDocumentProxyIcon != showsDocumentProxyIcon) {
+		_showsDocumentProxyIcon = showsDocumentProxyIcon;
+		[self _displayWindowAndTitlebar];
+	}
 }
 
-- (void)setCenterFullScreenButton:(BOOL)centerFullScreenButton{
-    if( _centerFullScreenButton != centerFullScreenButton ) {
-        _centerFullScreenButton = centerFullScreenButton;
-        [self _layoutTrafficLightsAndContent];
-    }
+- (void)setCenterFullScreenButton:(BOOL)centerFullScreenButton
+{
+	if (_centerFullScreenButton != centerFullScreenButton) {
+		_centerFullScreenButton = centerFullScreenButton;
+		[self _layoutTrafficLightsAndContent];
+	}
 }
 
 - (void)setCenterTrafficLightButtons:(BOOL)centerTrafficLightButtons
 {
-    if ( _centerTrafficLightButtons != centerTrafficLightButtons ) {
-        _centerTrafficLightButtons = centerTrafficLightButtons;
-        [self _layoutTrafficLightsAndContent];
-        [self _setupTrafficLightsTrackingArea];
-    }
+	if (_centerTrafficLightButtons != centerTrafficLightButtons) {
+		_centerTrafficLightButtons = centerTrafficLightButtons;
+		[self _layoutTrafficLightsAndContent];
+		[self _setupTrafficLightsTrackingArea];
+	}
 }
 
 - (void)setVerticalTrafficLightButtons:(BOOL)verticalTrafficLightButtons
 {
-    if ( _verticalTrafficLightButtons != verticalTrafficLightButtons ) {
-        _verticalTrafficLightButtons = verticalTrafficLightButtons;
-        [self _layoutTrafficLightsAndContent];
-        [self _setupTrafficLightsTrackingArea];
-    }
+	if (_verticalTrafficLightButtons != verticalTrafficLightButtons) {
+		_verticalTrafficLightButtons = verticalTrafficLightButtons;
+		[self _layoutTrafficLightsAndContent];
+		[self _setupTrafficLightsTrackingArea];
+	}
 }
 
 - (void)setVerticallyCenterTitle:(BOOL)verticallyCenterTitle
 {
-    if ( _verticallyCenterTitle != verticallyCenterTitle ) {
-        _verticallyCenterTitle = verticallyCenterTitle;
-        [self _displayWindowAndTitlebar];
-    }
+	if (_verticallyCenterTitle != verticallyCenterTitle) {
+		_verticallyCenterTitle = verticallyCenterTitle;
+		[self _displayWindowAndTitlebar];
+	}
 }
 
 - (void)setTrafficLightSeparation:(CGFloat)trafficLightSeparation
 {
-    if (_trafficLightSeparation != trafficLightSeparation) {
-        _trafficLightSeparation = trafficLightSeparation;
-        [self _layoutTrafficLightsAndContent];
-        [self _setupTrafficLightsTrackingArea];
-    }
+	if (_trafficLightSeparation != trafficLightSeparation) {
+		_trafficLightSeparation = trafficLightSeparation;
+		[self _layoutTrafficLightsAndContent];
+		[self _setupTrafficLightsTrackingArea];
+	}
 }
 
 - (void)setMouseDragDetectionThreshold:(CGFloat)mouseDragDetectionThreshold
 {
-    _titleBarContainer.mouseDragDetectionThreshold = mouseDragDetectionThreshold;
-}
-
-- (CGFloat)mouseDragDetectionThreshold {
-    return _titleBarContainer.mouseDragDetectionThreshold;
-}
-
-- (void)setDelegate:(id<NSWindowDelegate>)anObject
-{
-    [_delegateProxy setSecondaryDelegate:anObject];
-    [super setDelegate:nil];
-    [super setDelegate:_delegateProxy];
-}
-
-- (id<NSWindowDelegate>)delegate
-{
-    return [_delegateProxy secondaryDelegate];
-}
-
-- (void)setCloseButton:(INWindowButton *)closeButton {
-    if (_closeButton != closeButton) {
-        [_closeButton removeFromSuperview];
-        _closeButton = closeButton;
-        if (_closeButton) {
-            _closeButton.target = self;
-            _closeButton.action = @selector(performClose:);
-            [_closeButton setFrameOrigin:[[self standardWindowButton:NSWindowCloseButton] frame].origin];
-            [_closeButton.cell accessibilitySetOverrideValue:NSAccessibilityCloseButtonSubrole forAttribute:NSAccessibilitySubroleAttribute];
-            [_closeButton.cell accessibilitySetOverrideValue:NSAccessibilityRoleDescription(NSAccessibilityButtonRole, NSAccessibilityCloseButtonSubrole) forAttribute:NSAccessibilityRoleDescriptionAttribute];
-            [[self themeFrameView] addSubview:_closeButton];
-        }
-    }
-}
-
-- (void)setMinimizeButton:(INWindowButton *)minimizeButton {
-    if (_minimizeButton != minimizeButton) {
-        [_minimizeButton removeFromSuperview];
-        _minimizeButton = minimizeButton;
-        if (_minimizeButton) {
-            _minimizeButton.target = self;
-            _minimizeButton.action = @selector(performMiniaturize:);
-            [_minimizeButton setFrameOrigin:[[self standardWindowButton:NSWindowMiniaturizeButton] frame].origin];
-            [_minimizeButton.cell accessibilitySetOverrideValue:NSAccessibilityMinimizeButtonSubrole forAttribute:NSAccessibilitySubroleAttribute];
-            [_minimizeButton.cell accessibilitySetOverrideValue:NSAccessibilityRoleDescription(NSAccessibilityButtonRole, NSAccessibilityMinimizeButtonSubrole) forAttribute:NSAccessibilityRoleDescriptionAttribute];
-            [[self themeFrameView] addSubview:_minimizeButton];
-        }
-    }
-}
-
-- (void)setZoomButton:(INWindowButton *)zoomButton {
-    if (_zoomButton != zoomButton) {
-        [_zoomButton removeFromSuperview];
-        _zoomButton = zoomButton;
-        if (_zoomButton) {
-            _zoomButton.target = self;
-            _zoomButton.action = @selector(performZoom:);
-            [_zoomButton setFrameOrigin:[[self standardWindowButton:NSWindowZoomButton] frame].origin];
-            [_zoomButton.cell accessibilitySetOverrideValue:NSAccessibilityZoomButtonSubrole forAttribute:NSAccessibilitySubroleAttribute];
-            [_zoomButton.cell accessibilitySetOverrideValue:NSAccessibilityRoleDescription(NSAccessibilityButtonRole, NSAccessibilityZoomButtonSubrole) forAttribute:NSAccessibilityRoleDescriptionAttribute];
-            [[self themeFrameView] addSubview:_zoomButton];
-        }
-    }
-}
-
-- (void)setFullScreenButton:(INWindowButton *)fullScreenButton {
-    if (_fullScreenButton != fullScreenButton) {
-        [_fullScreenButton removeFromSuperview];
-        _fullScreenButton = fullScreenButton;
-        if (_fullScreenButton) {
-            _fullScreenButton.target = self;
-            _fullScreenButton.action = @selector(toggleFullScreen:);
-            [_fullScreenButton setFrameOrigin:[[self standardWindowButton:NSWindowFullScreenButton] frame].origin];
-            [_fullScreenButton.cell accessibilitySetOverrideValue:NSAccessibilityFullScreenButtonSubrole forAttribute:NSAccessibilitySubroleAttribute];
-            [_fullScreenButton.cell accessibilitySetOverrideValue:NSAccessibilityRoleDescription(NSAccessibilityButtonRole, NSAccessibilityFullScreenButtonSubrole) forAttribute:NSAccessibilityRoleDescriptionAttribute];
-            [[self themeFrameView] addSubview:_fullScreenButton];
-        }
-    }
+	_titleBarContainer.mouseDragDetectionThreshold = mouseDragDetectionThreshold;
+}
+
+- (CGFloat)mouseDragDetectionThreshold
+{
+	return _titleBarContainer.mouseDragDetectionThreshold;
+}
+
+- (void)setDelegate:(id <NSWindowDelegate>)anObject
+{
+	[_delegateProxy setSecondaryDelegate:anObject];
+	[super setDelegate:nil];
+	[super setDelegate:_delegateProxy];
+}
+
+- (id <NSWindowDelegate>)delegate
+{
+	return [_delegateProxy secondaryDelegate];
+}
+
+- (void)setCloseButton:(INWindowButton *)closeButton
+{
+	if (_closeButton != closeButton) {
+		[_closeButton removeFromSuperview];
+		_closeButton = closeButton;
+		if (_closeButton) {
+			_closeButton.target = self;
+			_closeButton.action = @selector(performClose:);
+			[_closeButton setFrameOrigin:[[self standardWindowButton:NSWindowCloseButton] frame].origin];
+			[_closeButton.cell accessibilitySetOverrideValue:NSAccessibilityCloseButtonSubrole forAttribute:NSAccessibilitySubroleAttribute];
+			[_closeButton.cell accessibilitySetOverrideValue:NSAccessibilityRoleDescription(NSAccessibilityButtonRole, NSAccessibilityCloseButtonSubrole) forAttribute:NSAccessibilityRoleDescriptionAttribute];
+			[[self themeFrameView] addSubview:_closeButton];
+		}
+	}
+}
+
+- (void)setMinimizeButton:(INWindowButton *)minimizeButton
+{
+	if (_minimizeButton != minimizeButton) {
+		[_minimizeButton removeFromSuperview];
+		_minimizeButton = minimizeButton;
+		if (_minimizeButton) {
+			_minimizeButton.target = self;
+			_minimizeButton.action = @selector(performMiniaturize:);
+			[_minimizeButton setFrameOrigin:[[self standardWindowButton:NSWindowMiniaturizeButton] frame].origin];
+			[_minimizeButton.cell accessibilitySetOverrideValue:NSAccessibilityMinimizeButtonSubrole forAttribute:NSAccessibilitySubroleAttribute];
+			[_minimizeButton.cell accessibilitySetOverrideValue:NSAccessibilityRoleDescription(NSAccessibilityButtonRole, NSAccessibilityMinimizeButtonSubrole) forAttribute:NSAccessibilityRoleDescriptionAttribute];
+			[[self themeFrameView] addSubview:_minimizeButton];
+		}
+	}
+}
+
+- (void)setZoomButton:(INWindowButton *)zoomButton
+{
+	if (_zoomButton != zoomButton) {
+		[_zoomButton removeFromSuperview];
+		_zoomButton = zoomButton;
+		if (_zoomButton) {
+			_zoomButton.target = self;
+			_zoomButton.action = @selector(performZoom:);
+			[_zoomButton setFrameOrigin:[[self standardWindowButton:NSWindowZoomButton] frame].origin];
+			[_zoomButton.cell accessibilitySetOverrideValue:NSAccessibilityZoomButtonSubrole forAttribute:NSAccessibilitySubroleAttribute];
+			[_zoomButton.cell accessibilitySetOverrideValue:NSAccessibilityRoleDescription(NSAccessibilityButtonRole, NSAccessibilityZoomButtonSubrole) forAttribute:NSAccessibilityRoleDescriptionAttribute];
+			[[self themeFrameView] addSubview:_zoomButton];
+		}
+	}
+}
+
+- (void)setFullScreenButton:(INWindowButton *)fullScreenButton
+{
+	if (_fullScreenButton != fullScreenButton) {
+		[_fullScreenButton removeFromSuperview];
+		_fullScreenButton = fullScreenButton;
+		if (_fullScreenButton) {
+			_fullScreenButton.target = self;
+			_fullScreenButton.action = @selector(toggleFullScreen:);
+			[_fullScreenButton setFrameOrigin:[[self standardWindowButton:NSWindowFullScreenButton] frame].origin];
+			[_fullScreenButton.cell accessibilitySetOverrideValue:NSAccessibilityFullScreenButtonSubrole forAttribute:NSAccessibilitySubroleAttribute];
+			[_fullScreenButton.cell accessibilitySetOverrideValue:NSAccessibilityRoleDescription(NSAccessibilityButtonRole, NSAccessibilityFullScreenButtonSubrole) forAttribute:NSAccessibilityRoleDescriptionAttribute];
+			[[self themeFrameView] addSubview:_fullScreenButton];
+		}
+	}
 }
 
 - (void)setStyleMask:(NSUInteger)styleMask
@@ -823,328 +830,335 @@ NS_INLINE CGGradientRef INCreateGradientWithColors(NSColor *startingColor, NSCol
 
 - (void)_doInitialWindowSetup
 {
-    _showsBaselineSeparator = YES;
-    _centerTrafficLightButtons = YES;
-    _titleBarHeight = [self _minimumTitlebarHeight];
-    _cachedTitleBarHeight = _titleBarHeight;
-    _trafficLightButtonsLeftMargin = [self _defaultTrafficLightLeftMargin];
-    _delegateProxy = [INAppStoreWindowDelegateProxy alloc];
-    _trafficLightButtonsTopMargin = 3.f;
-    _fullScreenButtonTopMargin = 3.f;
-    _trafficLightSeparation = [self _defaultTrafficLightSeparation];
-    [super setDelegate:_delegateProxy];
-    
-    /** -----------------------------------------
-     - The window automatically does layout every time its moved or resized, which means that the traffic lights and content view get reset at the original positions, so we need to put them back in place
-     - NSWindow is hardcoded to redraw the traffic lights in a specific rect, so when they are moved down, only part of the buttons get redrawn, causing graphical artifacts. Therefore, the window must be force redrawn every time it becomes key/resigns key
-     ----------------------------------------- **/
-    NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
-    [nc addObserver:self selector:@selector(_layoutTrafficLightsAndContent) name:NSWindowDidResizeNotification object:self];
-    [nc addObserver:self selector:@selector(_layoutTrafficLightsAndContent) name:NSWindowDidMoveNotification object:self];
-    [nc addObserver:self selector:@selector(_layoutTrafficLightsAndContent) name:NSWindowDidEndSheetNotification object:self];
-	
-    [nc addObserver:self selector:@selector(_updateTitlebarView) name:NSApplicationDidBecomeActiveNotification object:nil];
-    [nc addObserver:self selector:@selector(_updateTitlebarView) name:NSApplicationDidResignActiveNotification object:nil];
-    #if IN_COMPILING_LION
-    if (IN_RUNNING_LION) {
-        [nc addObserver:self selector:@selector(windowDidExitFullScreen:) name:NSWindowDidExitFullScreenNotification object:self];
-        [nc addObserver:self selector:@selector(windowWillEnterFullScreen:) name:NSWindowWillEnterFullScreenNotification object:self];
-        [nc addObserver:self selector:@selector(windowWillExitFullScreen:) name:NSWindowWillExitFullScreenNotification object:self];
-    }
-    #endif
-    [self _createTitlebarView];
-    [self _layoutTrafficLightsAndContent];
-    [self _setupTrafficLightsTrackingArea];
-}
-
-- (NSButton *)_windowButtonToLayout:(NSWindowButton)defaultButtonType orUserProvided:(NSButton *)userButton {
-    NSButton *defaultButton = [self standardWindowButton:defaultButtonType];
-    if (userButton) {
-        [defaultButton setHidden:YES];
-        defaultButton = userButton;
-    } else if ([defaultButton superview] != [self themeFrameView]) {
-        [defaultButton setHidden:NO];
-    }
-    return defaultButton;
-}
-
-- (NSButton *)_closeButtonToLayout {
-    return [self _windowButtonToLayout:NSWindowCloseButton orUserProvided:self.closeButton];
-}
-
-- (NSButton *)_minimizeButtonToLayout {
-    return [self _windowButtonToLayout:NSWindowMiniaturizeButton orUserProvided:self.minimizeButton];
-}
-
-- (NSButton *)_zoomButtonToLayout {
-    return [self _windowButtonToLayout:NSWindowZoomButton orUserProvided:self.zoomButton];
-}
-
-- (NSButton *)_fullScreenButtonToLayout {
-    return [self _windowButtonToLayout:NSWindowFullScreenButton orUserProvided:self.fullScreenButton];
+	_showsBaselineSeparator = YES;
+	_centerTrafficLightButtons = YES;
+	_titleBarHeight = [self _minimumTitlebarHeight];
+	_cachedTitleBarHeight = _titleBarHeight;
+	_trafficLightButtonsLeftMargin = [self _defaultTrafficLightLeftMargin];
+	_delegateProxy = [INAppStoreWindowDelegateProxy alloc];
+	_trafficLightButtonsTopMargin = 3.f;
+	_fullScreenButtonTopMargin = 3.f;
+	_trafficLightSeparation = [self _defaultTrafficLightSeparation];
+	[super setDelegate:_delegateProxy];
+
+	/** -----------------------------------------
+	 - The window automatically does layout every time its moved or resized, which means that the traffic lights and content view get reset at the original positions, so we need to put them back in place
+	 - NSWindow is hardcoded to redraw the traffic lights in a specific rect, so when they are moved down, only part of the buttons get redrawn, causing graphical artifacts. Therefore, the window must be force redrawn every time it becomes key/resigns key
+	 ----------------------------------------- **/
+	NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
+	[nc addObserver:self selector:@selector(_layoutTrafficLightsAndContent) name:NSWindowDidResizeNotification object:self];
+	[nc addObserver:self selector:@selector(_layoutTrafficLightsAndContent) name:NSWindowDidMoveNotification object:self];
+	[nc addObserver:self selector:@selector(_layoutTrafficLightsAndContent) name:NSWindowDidEndSheetNotification object:self];
+
+	[nc addObserver:self selector:@selector(_updateTitlebarView) name:NSApplicationDidBecomeActiveNotification object:nil];
+	[nc addObserver:self selector:@selector(_updateTitlebarView) name:NSApplicationDidResignActiveNotification object:nil];
+#if IN_COMPILING_LION
+	if (IN_RUNNING_LION) {
+		[nc addObserver:self selector:@selector(windowDidExitFullScreen:) name:NSWindowDidExitFullScreenNotification object:self];
+		[nc addObserver:self selector:@selector(windowWillEnterFullScreen:) name:NSWindowWillEnterFullScreenNotification object:self];
+		[nc addObserver:self selector:@selector(windowWillExitFullScreen:) name:NSWindowWillExitFullScreenNotification object:self];
+	}
+#endif
+	[self _createTitlebarView];
+	[self _layoutTrafficLightsAndContent];
+	[self _setupTrafficLightsTrackingArea];
+}
+
+- (NSButton *)_windowButtonToLayout:(NSWindowButton)defaultButtonType orUserProvided:(NSButton *)userButton
+{
+	NSButton *defaultButton = [self standardWindowButton:defaultButtonType];
+	if (userButton) {
+		[defaultButton setHidden:YES];
+		defaultButton = userButton;
+	} else if ([defaultButton superview] != [self themeFrameView]) {
+		[defaultButton setHidden:NO];
+	}
+	return defaultButton;
+}
+
+- (NSButton *)_closeButtonToLayout
+{
+	return [self _windowButtonToLayout:NSWindowCloseButton orUserProvided:self.closeButton];
+}
+
+- (NSButton *)_minimizeButtonToLayout
+{
+	return [self _windowButtonToLayout:NSWindowMiniaturizeButton orUserProvided:self.minimizeButton];
+}
+
+- (NSButton *)_zoomButtonToLayout
+{
+	return [self _windowButtonToLayout:NSWindowZoomButton orUserProvided:self.zoomButton];
+}
+
+- (NSButton *)_fullScreenButtonToLayout
+{
+	return [self _windowButtonToLayout:NSWindowFullScreenButton orUserProvided:self.fullScreenButton];
 }
 
 - (void)_layoutTrafficLightsAndContent
 {
-    // Reposition/resize the title bar view as needed
-    [self _recalculateFrameForTitleBarContainer];
-    NSButton *close = [self _closeButtonToLayout];
-    NSButton *minimize = [self _minimizeButtonToLayout];
-    NSButton *zoom = [self _zoomButtonToLayout];
-    
-    // Set the frame of the window buttons
-    NSRect closeFrame = [close frame];
-    NSRect minimizeFrame = [minimize frame];
-    NSRect zoomFrame = [zoom frame];
-    NSRect titleBarFrame = [_titleBarContainer frame];
-    CGFloat buttonOrigin = 0.0;
-    if (!self.verticalTrafficLightButtons) {
-        if (self.centerTrafficLightButtons) {
-            buttonOrigin = round(NSMidY(titleBarFrame) - INMidHeight(closeFrame));
-        } else {
-            buttonOrigin = NSMaxY(titleBarFrame) - NSHeight(closeFrame) - self.trafficLightButtonsTopMargin;
-        }
-        closeFrame.origin.y = buttonOrigin;
-        minimizeFrame.origin.y = buttonOrigin;
-        zoomFrame.origin.y = buttonOrigin;
-        closeFrame.origin.x = self.trafficLightButtonsLeftMargin;
-        minimizeFrame.origin.x = NSMaxX(closeFrame) + self.trafficLightSeparation;
-        zoomFrame.origin.x = NSMaxX(minimizeFrame) + self.trafficLightSeparation;
-    } else {
-        CGFloat groupHeight = NSHeight(closeFrame) + NSHeight(minimizeFrame) + NSHeight(zoomFrame) + 2.f * (self.trafficLightSeparation - 2.f);
-        if (self.centerTrafficLightButtons)  {
-            buttonOrigin = round(NSMidY(titleBarFrame) - groupHeight / 2.f);
-        } else {
-            buttonOrigin = NSMaxY(titleBarFrame) - groupHeight - self.trafficLightButtonsTopMargin;
-        }
-        closeFrame.origin.x = self.trafficLightButtonsLeftMargin;
-        minimizeFrame.origin.x = self.trafficLightButtonsLeftMargin;
-        zoomFrame.origin.x = self.trafficLightButtonsLeftMargin;
-        zoomFrame.origin.y = buttonOrigin;
-        minimizeFrame.origin.y = NSMaxY(zoomFrame) + self.trafficLightSeparation - 2.f;
-        closeFrame.origin.y = NSMaxY(minimizeFrame) + self.trafficLightSeparation - 2.f;
-    }
-    [close setFrame:closeFrame];
-    [minimize setFrame:minimizeFrame];
-    [zoom setFrame:zoomFrame];
-
-    NSButton *docIconButton = [self standardWindowButton:NSWindowDocumentIconButton];
-    if (docIconButton) {
-        NSRect docButtonIconFrame = [docIconButton frame];
-
-        if (self.verticallyCenterTitle) {
-            docButtonIconFrame.origin.y = floor(NSMidY(titleBarFrame) - INMidHeight(docButtonIconFrame));
-        } else {
-            docButtonIconFrame.origin.y = NSMaxY(titleBarFrame) - NSHeight(docButtonIconFrame) - INWindowDocumentIconButtonOriginY;
-        }
-
-        [docIconButton setFrame:docButtonIconFrame];
-    }
-
-    #if IN_COMPILING_LION
-    // Set the frame of the FullScreen button in Lion if available
-    if (IN_RUNNING_LION) {
-        NSButton *fullScreen = [self _fullScreenButtonToLayout];
-        if (fullScreen) {
-            NSRect fullScreenFrame = [fullScreen frame];
-            if (!_setFullScreenButtonRightMargin) {
-                self.fullScreenButtonRightMargin = NSWidth([_titleBarContainer frame]) - NSMaxX(fullScreen.frame);
-            }
-            fullScreenFrame.origin.x = NSWidth(titleBarFrame) - NSWidth(fullScreenFrame) - _fullScreenButtonRightMargin;
-            if (self.centerFullScreenButton) {
-                fullScreenFrame.origin.y = floor(NSMidY(titleBarFrame) - INMidHeight(fullScreenFrame));
-            } else {
-                fullScreenFrame.origin.y = NSMaxY(titleBarFrame) - NSHeight(fullScreenFrame) - self.fullScreenButtonTopMargin;
-            }
-            [fullScreen setFrame:fullScreenFrame];
-        }
-
-        NSButton *versionsButton = [self standardWindowButton:NSWindowDocumentVersionsButton];
-        if (versionsButton) {
-            NSRect versionsButtonFrame = [versionsButton frame];
-
-            if (self.verticallyCenterTitle) {
-                versionsButtonFrame.origin.y = floor(NSMidY(titleBarFrame) - INMidHeight(versionsButtonFrame));
-            } else {
-                versionsButtonFrame.origin.y = NSMaxY(titleBarFrame) - NSHeight(versionsButtonFrame) - INWindowDocumentVersionsButtonOriginY;
-            }
-
-            [versionsButton setFrame:versionsButtonFrame];
-
-            // Also ensure that the title font is set
-            if (self.titleFont) {
-                [versionsButton setFont:self.titleFont];
-            }
-        }
-        
-        for (id subview in [[[self contentView] superview] subviews]) {
-            if ([subview isKindOfClass:[NSTextField class]]) {
-                NSTextField *textField = (NSTextField *)subview;
-                NSRect textFieldFrame = [textField frame];
-
-                if (self.verticallyCenterTitle) {
-                    textFieldFrame.origin.y = round(NSMidY(titleBarFrame) - INMidHeight(textFieldFrame));
-                } else {
-                    textFieldFrame.origin.y = NSMaxY(titleBarFrame) - NSHeight(textFieldFrame) - INWindowDocumentVersionsDividerOriginY;
-                }
-
-                [textField setFrame:textFieldFrame];
-
-                // Also ensure that the font is set
-                if (self.titleFont) {
-                    [textField setFont:self.titleFont];
-                }
-            }
-        }
-    }
-    #endif
-    [self _repositionContentView];
-}
-
-- (void)undoManagerDidCloseUndoGroupNotification:(NSNotification *)notification {
-    [self _displayWindowAndTitlebar];
+	// Reposition/resize the title bar view as needed
+	[self _recalculateFrameForTitleBarContainer];
+	NSButton *close = [self _closeButtonToLayout];
+	NSButton *minimize = [self _minimizeButtonToLayout];
+	NSButton *zoom = [self _zoomButtonToLayout];
+
+	// Set the frame of the window buttons
+	NSRect closeFrame = [close frame];
+	NSRect minimizeFrame = [minimize frame];
+	NSRect zoomFrame = [zoom frame];
+	NSRect titleBarFrame = [_titleBarContainer frame];
+	CGFloat buttonOrigin = 0.0;
+	if (!self.verticalTrafficLightButtons) {
+		if (self.centerTrafficLightButtons) {
+			buttonOrigin = round(NSMidY(titleBarFrame) - INMidHeight(closeFrame));
+		} else {
+			buttonOrigin = NSMaxY(titleBarFrame) - NSHeight(closeFrame) - self.trafficLightButtonsTopMargin;
+		}
+		closeFrame.origin.y = buttonOrigin;
+		minimizeFrame.origin.y = buttonOrigin;
+		zoomFrame.origin.y = buttonOrigin;
+		closeFrame.origin.x = self.trafficLightButtonsLeftMargin;
+		minimizeFrame.origin.x = NSMaxX(closeFrame) + self.trafficLightSeparation;
+		zoomFrame.origin.x = NSMaxX(minimizeFrame) + self.trafficLightSeparation;
+	} else {
+		CGFloat groupHeight = NSHeight(closeFrame) + NSHeight(minimizeFrame) + NSHeight(zoomFrame) + 2.f * (self.trafficLightSeparation - 2.f);
+		if (self.centerTrafficLightButtons) {
+			buttonOrigin = round(NSMidY(titleBarFrame) - groupHeight / 2.f);
+		} else {
+			buttonOrigin = NSMaxY(titleBarFrame) - groupHeight - self.trafficLightButtonsTopMargin;
+		}
+		closeFrame.origin.x = self.trafficLightButtonsLeftMargin;
+		minimizeFrame.origin.x = self.trafficLightButtonsLeftMargin;
+		zoomFrame.origin.x = self.trafficLightButtonsLeftMargin;
+		zoomFrame.origin.y = buttonOrigin;
+		minimizeFrame.origin.y = NSMaxY(zoomFrame) + self.trafficLightSeparation - 2.f;
+		closeFrame.origin.y = NSMaxY(minimizeFrame) + self.trafficLightSeparation - 2.f;
+	}
+	[close setFrame:closeFrame];
+	[minimize setFrame:minimizeFrame];
+	[zoom setFrame:zoomFrame];
+
+	NSButton *docIconButton = [self standardWindowButton:NSWindowDocumentIconButton];
+	if (docIconButton) {
+		NSRect docButtonIconFrame = [docIconButton frame];
+
+		if (self.verticallyCenterTitle) {
+			docButtonIconFrame.origin.y = floor(NSMidY(titleBarFrame) - INMidHeight(docButtonIconFrame));
+		} else {
+			docButtonIconFrame.origin.y = NSMaxY(titleBarFrame) - NSHeight(docButtonIconFrame) - INWindowDocumentIconButtonOriginY;
+		}
+
+		[docIconButton setFrame:docButtonIconFrame];
+	}
+
+#if IN_COMPILING_LION
+	// Set the frame of the FullScreen button in Lion if available
+	if (IN_RUNNING_LION) {
+		NSButton *fullScreen = [self _fullScreenButtonToLayout];
+		if (fullScreen) {
+			NSRect fullScreenFrame = [fullScreen frame];
+			if (!_setFullScreenButtonRightMargin) {
+				self.fullScreenButtonRightMargin = NSWidth([_titleBarContainer frame]) - NSMaxX(fullScreen.frame);
+			}
+			fullScreenFrame.origin.x = NSWidth(titleBarFrame) - NSWidth(fullScreenFrame) - _fullScreenButtonRightMargin;
+			if (self.centerFullScreenButton) {
+				fullScreenFrame.origin.y = floor(NSMidY(titleBarFrame) - INMidHeight(fullScreenFrame));
+			} else {
+				fullScreenFrame.origin.y = NSMaxY(titleBarFrame) - NSHeight(fullScreenFrame) - self.fullScreenButtonTopMargin;
+			}
+			[fullScreen setFrame:fullScreenFrame];
+		}
+
+		NSButton *versionsButton = [self standardWindowButton:NSWindowDocumentVersionsButton];
+		if (versionsButton) {
+			NSRect versionsButtonFrame = [versionsButton frame];
+
+			if (self.verticallyCenterTitle) {
+				versionsButtonFrame.origin.y = floor(NSMidY(titleBarFrame) - INMidHeight(versionsButtonFrame));
+			} else {
+				versionsButtonFrame.origin.y = NSMaxY(titleBarFrame) - NSHeight(versionsButtonFrame) - INWindowDocumentVersionsButtonOriginY;
+			}
+
+			[versionsButton setFrame:versionsButtonFrame];
+
+			// Also ensure that the title font is set
+			if (self.titleFont) {
+				[versionsButton setFont:self.titleFont];
+			}
+		}
+
+		for (id subview in [[[self contentView] superview] subviews]) {
+			if ([subview isKindOfClass:[NSTextField class]]) {
+				NSTextField *textField = (NSTextField *) subview;
+				NSRect textFieldFrame = [textField frame];
+
+				if (self.verticallyCenterTitle) {
+					textFieldFrame.origin.y = round(NSMidY(titleBarFrame) - INMidHeight(textFieldFrame));
+				} else {
+					textFieldFrame.origin.y = NSMaxY(titleBarFrame) - NSHeight(textFieldFrame) - INWindowDocumentVersionsDividerOriginY;
+				}
+
+				[textField setFrame:textFieldFrame];
+
+				// Also ensure that the font is set
+				if (self.titleFont) {
+					[textField setFont:self.titleFont];
+				}
+			}
+		}
+	}
+#endif
+	[self _repositionContentView];
+}
+
+- (void)undoManagerDidCloseUndoGroupNotification:(NSNotification *)notification
+{
+	[self _displayWindowAndTitlebar];
 }
 
 - (void)windowWillEnterFullScreen:(NSNotification *)notification
 {
-    if (_hideTitleBarInFullScreen) {
-        // Recalculate the views when entering from fullscreen
-        _titleBarHeight = 0.0f;
-        [self _layoutTrafficLightsAndContent];
-        [self _displayWindowAndTitlebar];
-        
-        [self _hideTitleBarView:YES];
-    }
+	if (_hideTitleBarInFullScreen) {
+		// Recalculate the views when entering from fullscreen
+		_titleBarHeight = 0.0f;
+		[self _layoutTrafficLightsAndContent];
+		[self _displayWindowAndTitlebar];
+
+		[self _hideTitleBarView:YES];
+	}
 }
 
 - (void)windowWillExitFullScreen:(NSNotification *)notification
 {
-    if (_hideTitleBarInFullScreen) {
-        _titleBarHeight = _cachedTitleBarHeight;
-        [self _layoutTrafficLightsAndContent];
-        [self _displayWindowAndTitlebar];
-        
-        [self _hideTitleBarView:NO];
-    }
+	if (_hideTitleBarInFullScreen) {
+		_titleBarHeight = _cachedTitleBarHeight;
+		[self _layoutTrafficLightsAndContent];
+		[self _displayWindowAndTitlebar];
+
+		[self _hideTitleBarView:NO];
+	}
 }
 
 - (void)windowDidExitFullScreen:(NSNotification *)notification
 {
-    [self _layoutTrafficLightsAndContent];
-    [self _setupTrafficLightsTrackingArea];
+	[self _layoutTrafficLightsAndContent];
+	[self _setupTrafficLightsTrackingArea];
 }
 
-- (NSView *)themeFrameView {
-    return [[self contentView] superview];
+- (NSView *)themeFrameView
+{
+	return [[self contentView] superview];
 }
 
 - (void)_createTitlebarView
 {
-    // Create the title bar view
-    INTitlebarContainer *container = [[INTitlebarContainer alloc] initWithFrame:NSZeroRect];
-    // Configure the view properties and add it as a subview of the theme frame
-    NSView *firstSubview = [[[self themeFrameView] subviews] objectAtIndex:0];
-    [self _recalculateFrameForTitleBarContainer];
-    [[self themeFrameView] addSubview:container positioned:NSWindowBelow relativeTo:firstSubview];
-    #if __has_feature(objc_arc)
-    _titleBarContainer = container;
-    self.titleBarView = [[INTitlebarView alloc] initWithFrame:NSZeroRect];
-    #else
-    _titleBarContainer = [container autorelease];
-    self.titleBarView = [[[INTitlebarView alloc] initWithFrame:NSZeroRect] autorelease];
-    #endif
+	// Create the title bar view
+	INTitlebarContainer *container = [[INTitlebarContainer alloc] initWithFrame:NSZeroRect];
+	// Configure the view properties and add it as a subview of the theme frame
+	NSView *firstSubview = [[[self themeFrameView] subviews] objectAtIndex:0];
+	[self _recalculateFrameForTitleBarContainer];
+	[[self themeFrameView] addSubview:container positioned:NSWindowBelow relativeTo:firstSubview];
+#if __has_feature(objc_arc)
+	_titleBarContainer = container;
+	self.titleBarView = [[INTitlebarView alloc] initWithFrame:NSZeroRect];
+#else
+	_titleBarContainer = [container autorelease];
+	self.titleBarView = [[[INTitlebarView alloc] initWithFrame:NSZeroRect] autorelease];
+	#endif
 }
 
 - (void)_hideTitleBarView:(BOOL)hidden
 {
-    [self.titleBarView setHidden:hidden];
+	[self.titleBarView setHidden:hidden];
 }
 
 // Solution for tracking area issue thanks to @Perspx (Alex Rozanski) <https://gist.github.com/972958>
 - (void)_setupTrafficLightsTrackingArea
 {
-    [[self themeFrameView] viewWillStartLiveResize];
-    [[self themeFrameView] viewDidEndLiveResize];
+	[[self themeFrameView] viewWillStartLiveResize];
+	[[self themeFrameView] viewDidEndLiveResize];
 }
 
 - (void)_recalculateFrameForTitleBarContainer
 {
-    NSRect themeFrameRect = [[self themeFrameView] frame];
-    NSRect titleFrame = NSMakeRect(0.0, NSMaxY(themeFrameRect) - _titleBarHeight, NSWidth(themeFrameRect), _titleBarHeight);
-    [_titleBarContainer setFrame:titleFrame];
+	NSRect themeFrameRect = [[self themeFrameView] frame];
+	NSRect titleFrame = NSMakeRect(0.0, NSMaxY(themeFrameRect) - _titleBarHeight, NSWidth(themeFrameRect), _titleBarHeight);
+	[_titleBarContainer setFrame:titleFrame];
 }
 
 - (NSRect)_contentViewFrame
 {
-    NSRect windowFrame = self.frame;
-    NSRect contentRect = [self contentRectForFrameRect:windowFrame];
-    
-    contentRect.size.height = NSHeight(windowFrame) - _titleBarHeight;
-    contentRect.origin = NSZeroPoint;
-    
-    return contentRect;
+	NSRect windowFrame = self.frame;
+	NSRect contentRect = [self contentRectForFrameRect:windowFrame];
+
+	contentRect.size.height = NSHeight(windowFrame) - _titleBarHeight;
+	contentRect.origin = NSZeroPoint;
+
+	return contentRect;
 }
 
 - (void)_repositionContentView
 {
-    NSView *contentView = [self contentView];
-    NSRect newFrame = [self _contentViewFrame];
-    
-    if (!NSEqualRects([contentView frame], newFrame)) {
-        [contentView setFrame:newFrame];
-        [contentView setNeedsDisplay:YES];
-    }
+	NSView *contentView = [self contentView];
+	NSRect newFrame = [self _contentViewFrame];
+
+	if (!NSEqualRects([contentView frame], newFrame)) {
+		[contentView setFrame:newFrame];
+		[contentView setNeedsDisplay:YES];
+	}
 }
 
 - (CGFloat)_minimumTitlebarHeight
 {
-    static CGFloat minTitleHeight = 0.0;
-    if (!minTitleHeight) {
-        NSRect frameRect = [self frame];
-        NSRect contentRect = [self contentRectForFrameRect:frameRect];
-        minTitleHeight = NSHeight(frameRect) - NSHeight(contentRect);
-    }
-    return minTitleHeight;
+	static CGFloat minTitleHeight = 0.0;
+	if (!minTitleHeight) {
+		NSRect frameRect = [self frame];
+		NSRect contentRect = [self contentRectForFrameRect:frameRect];
+		minTitleHeight = NSHeight(frameRect) - NSHeight(contentRect);
+	}
+	return minTitleHeight;
 }
 
 - (CGFloat)_defaultTrafficLightLeftMargin
 {
-    static CGFloat trafficLightLeftMargin = 0.0;
-    if (!trafficLightLeftMargin) {
-        NSButton *close = [self _closeButtonToLayout];
-        trafficLightLeftMargin = NSMinX(close.frame);
-    }
-    return trafficLightLeftMargin;
+	static CGFloat trafficLightLeftMargin = 0.0;
+	if (!trafficLightLeftMargin) {
+		NSButton *close = [self _closeButtonToLayout];
+		trafficLightLeftMargin = NSMinX(close.frame);
+	}
+	return trafficLightLeftMargin;
 }
 
 - (CGFloat)_defaultTrafficLightSeparation
 {
-    static CGFloat trafficLightSeparation = 0.0;
-    if (!trafficLightSeparation) {
-        NSButton *close = [self _closeButtonToLayout];
-        NSButton *minimize = [self _minimizeButtonToLayout];
-        trafficLightSeparation = NSMinX(minimize.frame) - NSMaxX(close.frame);
-    }
-    return trafficLightSeparation;
+	static CGFloat trafficLightSeparation = 0.0;
+	if (!trafficLightSeparation) {
+		NSButton *close = [self _closeButtonToLayout];
+		NSButton *minimize = [self _minimizeButtonToLayout];
+		trafficLightSeparation = NSMinX(minimize.frame) - NSMaxX(close.frame);
+	}
+	return trafficLightSeparation;
 }
 
 - (void)_displayWindowAndTitlebar
 {
-    // Redraw the window and titlebar
-    [_titleBarView setNeedsDisplay:YES];
+	// Redraw the window and titlebar
+	[_titleBarView setNeedsDisplay:YES];
 }
 
 - (void)_updateTitlebarView
 {
-    [_titleBarView setNeedsDisplay:YES];
-	
-    // "validate" any controls in the titlebar view
-    BOOL isMainWindowAndActive = ([self isMainWindow] && [[NSApplication sharedApplication] isActive]);
-    for (NSView *childView in [_titleBarView subviews]) {
-        if ([childView isKindOfClass:[NSControl class]]) {
-            [(NSControl *)childView setEnabled:isMainWindowAndActive];
-        }
-    }
+	[_titleBarView setNeedsDisplay:YES];
+
+	// "validate" any controls in the titlebar view
+	BOOL isMainWindowAndActive = ([self isMainWindow] && [[NSApplication sharedApplication] isActive]);
+	for (NSView *childView in [_titleBarView subviews]) {
+		if ([childView isKindOfClass:[NSControl class]]) {
+			[(NSControl *) childView setEnabled:isMainWindowAndActive];
+		}
+	}
 }
 
 @end
